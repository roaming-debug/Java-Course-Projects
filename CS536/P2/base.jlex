import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.
  
class TokenVal {
    // fields
    int lineNum;
    int charNum;
    
    // constructor
    TokenVal(int lineNum, int charNum) {
        this.lineNum = lineNum;
        this.charNum = charNum;
    }
}
  
class IntLitTokenVal extends TokenVal {
    // new field: the value of the integer literal
    int intVal;
    
    // constructor
    IntLitTokenVal(int lineNum, int charNum, int intVal) {
        super(lineNum, charNum);
        this.intVal = intVal;
    }
}
  
class IdTokenVal extends TokenVal {
    // new field: the value of the identifier
    String idVal;
    
    // constructor
    IdTokenVal(int lineNum, int charNum, String idVal) {
        super(lineNum, charNum);
        this.idVal = idVal;
    }
}
  
class StrLitTokenVal extends TokenVal {
    // new field: the value of the string literal
    String strVal;
    
    // constructor
    StrLitTokenVal(int lineNum, int charNum, String strVal) {
        super(lineNum, charNum);
        this.strVal = strVal;
    }
}
  
// The following class is used to keep track of the character number at 
// which the current token starts on its line.
class CharNum {
    static int num = 1;
}
%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=       [a-zA-Z]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
    if (state == 1) {
        ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal ignored");
    }
    else if (state == 2) {
        ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
    }
    return new Symbol(sym.EOF);
%eofval}

%line

%state INSTRING

%state INSTRINGBADCHAR

%{
    StringBuffer string = new StringBuffer();
    
    // 0 - YYINITIAL, 1 - INSTRING, 2 - INSTRINGBADCHAR
    int state = 0;
%}

%%

<INSTRING> \"
            {
                yybegin(YYINITIAL); 
                state = 0;
                string.append(yytext());
                Symbol S = new Symbol(sym.STRLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, string.toString()));
                CharNum.num += string.toString().length();
                return S;
            }

<INSTRINGBADCHAR> \"
            {
                yybegin(YYINITIAL);
                state = 0;
                ErrMsg.fatal(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
                CharNum.num += string.toString().length();
            }


<INSTRING, INSTRINGBADCHAR> \\$
            {
                yybegin(INSTRINGBADCHAR);
                state = 2;
            }

<INSTRING> \\[nst\'\"\\]
            {
                string.append(yytext());
            }

<INSTRING> \\[^nst\'\"\\]
            {
                yybegin(INSTRINGBADCHAR);
                state = 2;
            }

<INSTRING> \n
            {
                yybegin(YYINITIAL);
                state = 0;
                ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal ignored");
                CharNum.num = 1;
            }

<INSTRINGBADCHAR> \n
            {
                yybegin(YYINITIAL);
                state = 0;
                ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
                CharNum.num = 1;
            }


<INSTRING, INSTRINGBADCHAR> [^\\\"\n]+
            {
                string.append(yytext());
            }

<YYINITIAL> "\""
            {
                yybegin(INSTRING);
                state = 1;
                string = new StringBuffer();
                string.append(yytext());
            }

<YYINITIAL> !!.*$ {}

<YYINITIAL> \$.*$ {}

<YYINITIAL> "void"
            {
                Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "logical"
            {
                Symbol S = new Symbol(sym.LOGICAL, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "integer"
            {
                Symbol S = new Symbol(sym.INTEGER, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "True"
            {
                Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "False"
            {
                Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "tuple"
            {
                Symbol S = new Symbol(sym.TUPLE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "read"
            {
                Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "write"
            {
                Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "if"
            {
                Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "else"
            {
                Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "while"
            {
                Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "return"
            {
                Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ({LETTER}|"_")({LETTER}|"_"|{DIGIT})* 
            {
                Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> {DIGIT}+
            {
                int val;
                try {
                    val = Integer.parseInt(yytext());
                } catch (Exception e) {
                    ErrMsg.fatal(yyline+1, CharNum.num, "integer literal too large - using max value");
                    val = Integer.MAX_VALUE;
                }
                Symbol S = new Symbol(sym.INTLITERAL,
                                new IntLitTokenVal(yyline+1, CharNum.num, val));
                CharNum.num += yytext().length();
                return S;
          }

<YYINITIAL> \n        { CharNum.num = 1; }

<YYINITIAL> {WHITESPACE}+  { CharNum.num += yytext().length(); }

<YYINITIAL> "<<"
            {
                Symbol S = new Symbol(sym.OUTPUTOP, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ">>"
            {
                Symbol S = new Symbol(sym.INPUTOP, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "--"
            {
                Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "++"
            {
                Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "<="
            {
                Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ">="
            {
                Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "=="
            {
                Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "~="
            {
                Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "{"
            {
                Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "}"
            {
                Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "("
            {
                Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ")"
            {
                Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "["
            {
                Symbol S = new Symbol(sym.LSQBRACKET, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "]"
            {
                Symbol S = new Symbol(sym.RSQBRACKET, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ":"
            {
                Symbol S = new Symbol(sym.COLON, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ","
            {
                Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "."
            {
                Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "="
            {
                Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "~"
            {
                Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "&"
            {
                Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "|"
            {
                Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "+"
            {
                Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "-"
            {
                Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "*"
            {
                Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "/"
            {
                Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> "<"
            {
                Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }

<YYINITIAL> ">"
            {
                Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
                CharNum.num += yytext().length();
                return S;
            }
        
<YYINITIAL> .
            {
                ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
                CharNum.num++;
            }
